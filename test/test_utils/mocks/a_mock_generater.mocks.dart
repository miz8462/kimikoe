// Mocks generated by Mockito 5.4.5 from annotations
// in kimikoe_app/test/test_utils/mocks/a_mock_generater.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i11;
import 'dart:io' as _i12;

import 'package:flutter/material.dart' as _i13;
import 'package:kimikoe_app/services/supabase_services/supabase_delete.dart'
    as _i3;
import 'package:kimikoe_app/services/supabase_services/supabase_favorite.dart'
    as _i4;
import 'package:kimikoe_app/services/supabase_services/supabase_fetch.dart'
    as _i5;
import 'package:kimikoe_app/services/supabase_services/supabase_insert.dart'
    as _i6;
import 'package:kimikoe_app/services/supabase_services/supabase_services.dart'
    as _i10;
import 'package:kimikoe_app/services/supabase_services/supabase_storage.dart'
    as _i7;
import 'package:kimikoe_app/services/supabase_services/supabase_update.dart'
    as _i8;
import 'package:kimikoe_app/services/supabase_services/supabase_utils.dart'
    as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i14;
import 'package:supabase_flutter/supabase_flutter.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSupabaseClient_0 extends _i1.SmartFake
    implements _i2.SupabaseClient {
  _FakeSupabaseClient_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSupabaseDelete_1 extends _i1.SmartFake
    implements _i3.SupabaseDelete {
  _FakeSupabaseDelete_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSupabaseFavorite_2 extends _i1.SmartFake
    implements _i4.SupabaseFavorite {
  _FakeSupabaseFavorite_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSupabaseFetch_3 extends _i1.SmartFake implements _i5.SupabaseFetch {
  _FakeSupabaseFetch_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSupabaseInsert_4 extends _i1.SmartFake
    implements _i6.SupabaseInsert {
  _FakeSupabaseInsert_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSupabaseStorage_5 extends _i1.SmartFake
    implements _i7.SupabaseStorage {
  _FakeSupabaseStorage_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSupabaseUpdate_6 extends _i1.SmartFake
    implements _i8.SupabaseUpdate {
  _FakeSupabaseUpdate_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSupabaseUtils_7 extends _i1.SmartFake implements _i9.SupabaseUtils {
  _FakeSupabaseUtils_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [SupabaseServices].
///
/// See the documentation for Mockito's code generation for more information.
class MockSupabaseServices extends _i1.Mock implements _i10.SupabaseServices {
  MockSupabaseServices() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SupabaseClient get client =>
      (super.noSuchMethod(
            Invocation.getter(#client),
            returnValue: _FakeSupabaseClient_0(
              this,
              Invocation.getter(#client),
            ),
          )
          as _i2.SupabaseClient);

  @override
  _i3.SupabaseDelete get delete =>
      (super.noSuchMethod(
            Invocation.getter(#delete),
            returnValue: _FakeSupabaseDelete_1(
              this,
              Invocation.getter(#delete),
            ),
          )
          as _i3.SupabaseDelete);

  @override
  set delete(_i3.SupabaseDelete? _delete) => super.noSuchMethod(
    Invocation.setter(#delete, _delete),
    returnValueForMissingStub: null,
  );

  @override
  _i4.SupabaseFavorite get favorite =>
      (super.noSuchMethod(
            Invocation.getter(#favorite),
            returnValue: _FakeSupabaseFavorite_2(
              this,
              Invocation.getter(#favorite),
            ),
          )
          as _i4.SupabaseFavorite);

  @override
  set favorite(_i4.SupabaseFavorite? _favorite) => super.noSuchMethod(
    Invocation.setter(#favorite, _favorite),
    returnValueForMissingStub: null,
  );

  @override
  _i5.SupabaseFetch get fetch =>
      (super.noSuchMethod(
            Invocation.getter(#fetch),
            returnValue: _FakeSupabaseFetch_3(this, Invocation.getter(#fetch)),
          )
          as _i5.SupabaseFetch);

  @override
  set fetch(_i5.SupabaseFetch? _fetch) => super.noSuchMethod(
    Invocation.setter(#fetch, _fetch),
    returnValueForMissingStub: null,
  );

  @override
  _i6.SupabaseInsert get insert =>
      (super.noSuchMethod(
            Invocation.getter(#insert),
            returnValue: _FakeSupabaseInsert_4(
              this,
              Invocation.getter(#insert),
            ),
          )
          as _i6.SupabaseInsert);

  @override
  set insert(_i6.SupabaseInsert? _insert) => super.noSuchMethod(
    Invocation.setter(#insert, _insert),
    returnValueForMissingStub: null,
  );

  @override
  _i7.SupabaseStorage get storage =>
      (super.noSuchMethod(
            Invocation.getter(#storage),
            returnValue: _FakeSupabaseStorage_5(
              this,
              Invocation.getter(#storage),
            ),
          )
          as _i7.SupabaseStorage);

  @override
  set storage(_i7.SupabaseStorage? _storage) => super.noSuchMethod(
    Invocation.setter(#storage, _storage),
    returnValueForMissingStub: null,
  );

  @override
  _i8.SupabaseUpdate get update =>
      (super.noSuchMethod(
            Invocation.getter(#update),
            returnValue: _FakeSupabaseUpdate_6(
              this,
              Invocation.getter(#update),
            ),
          )
          as _i8.SupabaseUpdate);

  @override
  set update(_i8.SupabaseUpdate? _update) => super.noSuchMethod(
    Invocation.setter(#update, _update),
    returnValueForMissingStub: null,
  );

  @override
  _i9.SupabaseUtils get utils =>
      (super.noSuchMethod(
            Invocation.getter(#utils),
            returnValue: _FakeSupabaseUtils_7(this, Invocation.getter(#utils)),
          )
          as _i9.SupabaseUtils);

  @override
  set utils(_i9.SupabaseUtils? _utils) => super.noSuchMethod(
    Invocation.setter(#utils, _utils),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [SupabaseFetch].
///
/// See the documentation for Mockito's code generation for more information.
class MockSupabaseFetch extends _i1.Mock implements _i5.SupabaseFetch {
  MockSupabaseFetch() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SupabaseClient get client =>
      (super.noSuchMethod(
            Invocation.getter(#client),
            returnValue: _FakeSupabaseClient_0(
              this,
              Invocation.getter(#client),
            ),
          )
          as _i2.SupabaseClient);

  @override
  _i11.Future<List<Map<String, dynamic>>> fetchArtists() =>
      (super.noSuchMethod(
            Invocation.method(#fetchArtists, []),
            returnValue: _i11.Future<List<Map<String, dynamic>>>.value(
              <Map<String, dynamic>>[],
            ),
          )
          as _i11.Future<List<Map<String, dynamic>>>);

  @override
  _i11.Future<List<Map<String, dynamic>>> fetchSongs(int? groupId) =>
      (super.noSuchMethod(
            Invocation.method(#fetchSongs, [groupId]),
            returnValue: _i11.Future<List<Map<String, dynamic>>>.value(
              <Map<String, dynamic>>[],
            ),
          )
          as _i11.Future<List<Map<String, dynamic>>>);

  @override
  _i11.Future<List<Map<String, dynamic>>> fetchGroupMembers(int? groupId) =>
      (super.noSuchMethod(
            Invocation.method(#fetchGroupMembers, [groupId]),
            returnValue: _i11.Future<List<Map<String, dynamic>>>.value(
              <Map<String, dynamic>>[],
            ),
          )
          as _i11.Future<List<Map<String, dynamic>>>);

  @override
  _i11.Future<Map<String, dynamic>> fetchCurrentUser(String? currentUserId) =>
      (super.noSuchMethod(
            Invocation.method(#fetchCurrentUser, [currentUserId]),
            returnValue: _i11.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i11.Future<Map<String, dynamic>>);

  @override
  _i11.Future<List<Map<String, dynamic>>> fetchIdAndNameList(
    String? tableName,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#fetchIdAndNameList, [tableName]),
            returnValue: _i11.Future<List<Map<String, dynamic>>>.value(
              <Map<String, dynamic>>[],
            ),
          )
          as _i11.Future<List<Map<String, dynamic>>>);

  @override
  _i11.Stream<dynamic> fetchDataByStream({
    required String? table,
    required String? id,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#fetchDataByStream, [], {#table: table, #id: id}),
            returnValue: _i11.Stream<dynamic>.empty(),
          )
          as _i11.Stream<dynamic>);

  @override
  _i11.Future<List<Map<String, dynamic>>> fetchFavorites({
    required String? tableName,
    required String? userId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#fetchFavorites, [], {
              #tableName: tableName,
              #userId: userId,
            }),
            returnValue: _i11.Future<List<Map<String, dynamic>>>.value(
              <Map<String, dynamic>>[],
            ),
          )
          as _i11.Future<List<Map<String, dynamic>>>);

  @override
  _i11.Future<List<Map<String, dynamic>>> fetchFavoriteGroups(
    List<int>? favoriteIds,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#fetchFavoriteGroups, [favoriteIds]),
            returnValue: _i11.Future<List<Map<String, dynamic>>>.value(
              <Map<String, dynamic>>[],
            ),
          )
          as _i11.Future<List<Map<String, dynamic>>>);

  @override
  _i11.Future<List<Map<String, dynamic>>> fetchFavoriteSongs(
    List<int>? favoriteIds,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#fetchFavoriteSongs, [favoriteIds]),
            returnValue: _i11.Future<List<Map<String, dynamic>>>.value(
              <Map<String, dynamic>>[],
            ),
          )
          as _i11.Future<List<Map<String, dynamic>>>);
}

/// A class which mocks [SupabaseStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockSupabaseStorage extends _i1.Mock implements _i7.SupabaseStorage {
  MockSupabaseStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SupabaseClient get client =>
      (super.noSuchMethod(
            Invocation.getter(#client),
            returnValue: _FakeSupabaseClient_0(
              this,
              Invocation.getter(#client),
            ),
          )
          as _i2.SupabaseClient);

  @override
  _i11.Future<void> uploadImageToStorage({
    required String? table,
    required String? path,
    required _i12.File? file,
    required _i13.BuildContext? context,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#uploadImageToStorage, [], {
              #table: table,
              #path: path,
              #file: file,
              #context: context,
            }),
            returnValue: _i11.Future<void>.value(),
            returnValueForMissingStub: _i11.Future<void>.value(),
          )
          as _i11.Future<void>);

  @override
  String fetchImageUrl(String? imagePath) =>
      (super.noSuchMethod(
            Invocation.method(#fetchImageUrl, [imagePath]),
            returnValue: _i14.dummyValue<String>(
              this,
              Invocation.method(#fetchImageUrl, [imagePath]),
            ),
          )
          as String);
}
