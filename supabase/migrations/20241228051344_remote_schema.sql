create table "public"."artists" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "name" character varying not null,
    "image_url" text,
    "comment" text
);

alter table
    "public"."artists" enable row level security;

create table "public"."idol_groups" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "name" character varying not null,
    "year_forming_group" smallint,
    "comment" text,
    "image_url" text default 'https://inngzyruhkuljrsvujfw.supabase.co/storage/v1/object/public/images/no-images.png' :: text,
    "official_url" text,
    "twitter_url" text,
    "instagram_url" text,
    "schedule_url" text
);

alter table
    "public"."idol_groups" enable row level security;

create table "public"."idols" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "name" character varying not null,
    "color" character varying not null,
    "image_url" text,
    "group_id" bigint,
    "birthday" character varying,
    "height" bigint,
    "hometown" character varying,
    "debut_year" bigint,
    "comment" text,
    "official_url" text,
    "twitter_url" text,
    "instagram_url" text,
    "birth_year" bigint,
    "other_url" text
);

alter table
    "public"."idols" enable row level security;

create table "public"."profiles" (
    "id" uuid not null,
    "name" text default 'ユーザーネーム未定' :: text,
    "image_url" text default 'https://inngzyruhkuljrsvujfw.supabase.co/storage/v1/object/public/images/no-images.png' :: text,
    "email" text not null,
    "created_at" timestamp with time zone default (now() AT TIME ZONE 'utc' :: text),
    "comment" text default 'コメントを入力してください' :: text
);

alter table
    "public"."profiles" enable row level security;

create table "public"."songs" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "title" character varying not null,
    "lyrics" text not null,
    "image_url" text,
    "release_date" date,
    "group_id" bigint,
    "comment" text,
    "lyricist_id" bigint,
    "composer_id" bigint
);

alter table
    "public"."songs" enable row level security;

CREATE UNIQUE INDEX artists_pkey ON public.artists USING btree (id);

CREATE UNIQUE INDEX group_id_key ON public."idol_groups" USING btree (id);

CREATE UNIQUE INDEX group_pkey ON public."idol_groups" USING btree (id);

CREATE UNIQUE INDEX idol_pkey ON public.idols USING btree (id);

CREATE UNIQUE INDEX profiles_pkey ON public.profiles USING btree (id);

CREATE UNIQUE INDEX songs_pkey ON public.songs USING btree (id);

alter table
    "public"."artists"
add
    constraint "artists_pkey" PRIMARY KEY using index "artists_pkey";

alter table
    "public"."idol_groups"
add
    constraint "group_pkey" PRIMARY KEY using index "group_pkey";

alter table
    "public"."idols"
add
    constraint "idol_pkey" PRIMARY KEY using index "idol_pkey";

alter table
    "public"."profiles"
add
    constraint "profiles_pkey" PRIMARY KEY using index "profiles_pkey";

alter table
    "public"."songs"
add
    constraint "songs_pkey" PRIMARY KEY using index "songs_pkey";

alter table
    "public"."idol_groups"
add
    constraint "group_id_key" UNIQUE using index "group_id_key";

alter table
    "public"."idols"
add
    constraint "idol_group_id_fkey1" FOREIGN KEY (group_id) REFERENCES "idol_groups"(id) not valid;

alter table
    "public"."idols" validate constraint "idol_group_id_fkey1";

alter table
    "public"."profiles"
add
    constraint "profiles_id_fkey" FOREIGN KEY (id) REFERENCES auth.users(id) not valid;

alter table
    "public"."profiles" validate constraint "profiles_id_fkey";

alter table
    "public"."profiles"
add
    constraint "profiles_name_check" CHECK ((char_length(name) >= 0)) not valid;

alter table
    "public"."profiles" validate constraint "profiles_name_check";

alter table
    "public"."songs"
add
    constraint "songs_composer_fkey" FOREIGN KEY (composer_id) REFERENCES artists(id) not valid;

alter table
    "public"."songs" validate constraint "songs_composer_fkey";

alter table
    "public"."songs"
add
    constraint "songs_group_id_fkey" FOREIGN KEY (group_id) REFERENCES "idol_groups"(id) not valid;

alter table
    "public"."songs" validate constraint "songs_group_id_fkey";

alter table
    "public"."songs"
add
    constraint "songs_lyricist_fkey" FOREIGN KEY (lyricist_id) REFERENCES artists(id) not valid;

alter table
    "public"."songs" validate constraint "songs_lyricist_fkey";

set
    check_function_bodies = off;

CREATE
OR REPLACE FUNCTION public.handle_new_user() RETURNS trigger LANGUAGE plpgsql SECURITY DEFINER AS $function$ BEGIN
INSERT INTO
    public.profiles (id, email, name, image_url)
VALUES
    (
        NEW.id,
        NEW.email,
        COALESCE(NEW.raw_user_meta_data ->> 'name', ''),
        COALESCE(NEW.raw_user_meta_data ->> 'avatar_url', '')
    );

RETURN NEW;

END;

$function$;

grant delete on table "public"."artists" to "anon";

grant
insert
    on table "public"."artists" to "anon";

grant references on table "public"."artists" to "anon";

grant
select
    on table "public"."artists" to "anon";

grant trigger on table "public"."artists" to "anon";

grant truncate on table "public"."artists" to "anon";

grant
update
    on table "public"."artists" to "anon";

grant delete on table "public"."artists" to "authenticated";

grant
insert
    on table "public"."artists" to "authenticated";

grant references on table "public"."artists" to "authenticated";

grant
select
    on table "public"."artists" to "authenticated";

grant trigger on table "public"."artists" to "authenticated";

grant truncate on table "public"."artists" to "authenticated";

grant
update
    on table "public"."artists" to "authenticated";

grant delete on table "public"."artists" to "service_role";

grant
insert
    on table "public"."artists" to "service_role";

grant references on table "public"."artists" to "service_role";

grant
select
    on table "public"."artists" to "service_role";

grant trigger on table "public"."artists" to "service_role";

grant truncate on table "public"."artists" to "service_role";

grant
update
    on table "public"."artists" to "service_role";

grant delete on table "public"."idol_groups" to "anon";

grant
insert
    on table "public"."idol_groups" to "anon";

grant references on table "public"."idol_groups" to "anon";

grant
select
    on table "public"."idol_groups" to "anon";

grant trigger on table "public"."idol_groups" to "anon";

grant truncate on table "public"."idol_groups" to "anon";

grant
update
    on table "public"."idol_groups" to "anon";

grant delete on table "public"."idol_groups" to "authenticated";

grant
insert
    on table "public"."idol_groups" to "authenticated";

grant references on table "public"."idol_groups" to "authenticated";

grant
select
    on table "public"."idol_groups" to "authenticated";

grant trigger on table "public"."idol_groups" to "authenticated";

grant truncate on table "public"."idol_groups" to "authenticated";

grant
update
    on table "public"."idol_groups" to "authenticated";

grant delete on table "public"."idol_groups" to "service_role";

grant
insert
    on table "public"."idol_groups" to "service_role";

grant references on table "public"."idol_groups" to "service_role";

grant
select
    on table "public"."idol_groups" to "service_role";

grant trigger on table "public"."idol_groups" to "service_role";

grant truncate on table "public"."idol_groups" to "service_role";

grant
update
    on table "public"."idol_groups" to "service_role";

grant delete on table "public"."idols" to "anon";

grant
insert
    on table "public"."idols" to "anon";

grant references on table "public"."idols" to "anon";

grant
select
    on table "public"."idols" to "anon";

grant trigger on table "public"."idols" to "anon";

grant truncate on table "public"."idols" to "anon";

grant
update
    on table "public"."idols" to "anon";

grant delete on table "public"."idols" to "authenticated";

grant
insert
    on table "public"."idols" to "authenticated";

grant references on table "public"."idols" to "authenticated";

grant
select
    on table "public"."idols" to "authenticated";

grant trigger on table "public"."idols" to "authenticated";

grant truncate on table "public"."idols" to "authenticated";

grant
update
    on table "public"."idols" to "authenticated";

grant delete on table "public"."idols" to "service_role";

grant
insert
    on table "public"."idols" to "service_role";

grant references on table "public"."idols" to "service_role";

grant
select
    on table "public"."idols" to "service_role";

grant trigger on table "public"."idols" to "service_role";

grant truncate on table "public"."idols" to "service_role";

grant
update
    on table "public"."idols" to "service_role";

grant delete on table "public"."profiles" to "anon";

grant
insert
    on table "public"."profiles" to "anon";

grant references on table "public"."profiles" to "anon";

grant
select
    on table "public"."profiles" to "anon";

grant trigger on table "public"."profiles" to "anon";

grant truncate on table "public"."profiles" to "anon";

grant
update
    on table "public"."profiles" to "anon";

grant delete on table "public"."profiles" to "authenticated";

grant
insert
    on table "public"."profiles" to "authenticated";

grant references on table "public"."profiles" to "authenticated";

grant
select
    on table "public"."profiles" to "authenticated";

grant trigger on table "public"."profiles" to "authenticated";

grant truncate on table "public"."profiles" to "authenticated";

grant
update
    on table "public"."profiles" to "authenticated";

grant delete on table "public"."profiles" to "service_role";

grant
insert
    on table "public"."profiles" to "service_role";

grant references on table "public"."profiles" to "service_role";

grant
select
    on table "public"."profiles" to "service_role";

grant trigger on table "public"."profiles" to "service_role";

grant truncate on table "public"."profiles" to "service_role";

grant
update
    on table "public"."profiles" to "service_role";

grant delete on table "public"."songs" to "anon";

grant
insert
    on table "public"."songs" to "anon";

grant references on table "public"."songs" to "anon";

grant
select
    on table "public"."songs" to "anon";

grant trigger on table "public"."songs" to "anon";

grant truncate on table "public"."songs" to "anon";

grant
update
    on table "public"."songs" to "anon";

grant delete on table "public"."songs" to "authenticated";

grant
insert
    on table "public"."songs" to "authenticated";

grant references on table "public"."songs" to "authenticated";

grant
select
    on table "public"."songs" to "authenticated";

grant trigger on table "public"."songs" to "authenticated";

grant truncate on table "public"."songs" to "authenticated";

grant
update
    on table "public"."songs" to "authenticated";

grant delete on table "public"."songs" to "service_role";

grant
insert
    on table "public"."songs" to "service_role";

grant references on table "public"."songs" to "service_role";

grant
select
    on table "public"."songs" to "service_role";

grant trigger on table "public"."songs" to "service_role";

grant truncate on table "public"."songs" to "service_role";

grant
update
    on table "public"."songs" to "service_role";

create policy "Policy with security definer functions" on "public"."artists" as permissive for all to authenticated using (true);

create policy "Policy with security definer functions" on "public"."idol_groups" as permissive for all to authenticated using (true);

create policy "Policy with security definer functions" on "public"."idols" as permissive for all to authenticated using (true);

create policy "Public profiles are viewable by everyone." on "public"."profiles" as permissive for
select
    to public using (true);

create policy "Users can insert their own profile." on "public"."profiles" as permissive for
insert
    to public with check ((auth.uid() = id));

create policy "Users can update own profile." on "public"."profiles" as permissive for
update
    to public using (
        (
            (
                SELECT
                    auth.uid() AS uid
            ) = id
        )
    );

create policy "Policy with security definer functions" on "public"."songs" as permissive for all to public using (true);